package com.viamep.richard.jgopherd;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;

public class ClientThread extends Thread {
	private Socket socket;
	private PrintWriter out;
	private BufferedReader in;
	private int scode;
	private InetSocketAddress addr;
	private String line;
	private String params;
	private String fline;
	
	public ClientThread(Socket sock) {
		socket = sock;
		try {
			sock.setSoTimeout(Main.props.getPropertyInt("timeout",15));
		} catch (Throwable e1) {
			// do nothing
		}
		try {
			out = new PrintWriter(sock.getOutputStream(),true);
		} catch (Throwable e) {
			Main.log.warning("Unable to create output stream: "+e.getMessage());
			return;
		}
		try {
			in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
		} catch (Throwable e) {
			Main.log.warning("Unable to create input stream: "+e.getMessage());
			return;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void run() {
		addr = (InetSocketAddress)socket.getRemoteSocketAddress();
		String source = addr.getHostName()+":"+addr.getPort();
		line = "";
		fline = "";
		scode = 500;
		boolean log = true;
		boolean http = false;
		String httpreq = "";
		char httpkind = '1';
		boolean nomole = false;
		while (true) {
			try {
				line = in.readLine().replaceAll("\r","").replaceAll("\n","").replaceAll("\\.\\.","");
			} catch (SocketTimeoutException e) {
				continue;
			} catch (Throwable e) {
				continue;
			}
			if (!line.startsWith("/")) line = "/"+line;
			fline = line;
			String[] linex = line.split("\\?");
			try {
				line = linex[0];
			} catch (Throwable e) {
				line = "/";
			}
			try {
				params = linex[1];
			} catch (Throwable e) {
				params = "";
			}
			if (line.startsWith("!nomole!")) {
				nomole = true;
				line = line.substring(5);
			}
				if (line.indexOf("$") != -1) {
					scode = 400;
					String[] sa = {"Your gopher client attempted to do a Gopher+ request. Gopher+ is not supported by this server."};
					MakeError("I do not do Gopher+!",sa);
					break;
				}
				File f = new File(Main.props.getPropertyString("root","gopherdocs")+line);
				if (line.startsWith("/GET ") || line.startsWith("/POST ")) {
					log = false;
					http = true;
					try {
						httpreq = Util.GetArray(line.split(" ")[1].split("/"),2,0);
					} catch (Throwable e) {
						httpreq = "/";
					}
					try {
						httpkind = line.split(" ")[1].charAt(1);
					} catch (Throwable e) {
						httpkind = '1';
					}
					if (!httpreq.startsWith("/")) httpreq = "/"+httpreq;
				} else if (http && (line.equalsIgnoreCase("/"))) {
					scode = 200;
					ArrayList<GopherEntry> al = MakeEntries(httpreq,nomole);
					boolean haserror = false;
					for (GopherEntry ge : al) {
						if (ge.kind == '3') haserror = true;
					}
					out.println("HTTP/1.1 "+(haserror ? "404 Not Found" : "200 OK"));
					if (httpkind == '1') {
						out.println("Content-Type: text/html");
						out.println("");
						out.println("<html><head><title>Gopher: "+Util.HTMLEscape(httpreq)+"</title></head><body>");
						out.println("<h2><a href=\"/1\">[/]</a> Gopher: "+Util.HTMLEscape(httpreq)+"</h2><hr>");
						out.println("<table border=\"0\"><tbody>");
						for (GopherEntry ge : al) {
							if (ge.kind == 'i') {
								out.println("<tr><td>&nbsp;</td><td><pre>"+ge.title+"</pre></td></tr>");
							} else if (ge.kind == '3') {
								out.println("<tr><td>&nbsp;</td><td><pre><font color=\"red\"><b>"+ge.title+"</b></font></pre></td></tr>");
							} else {
								out.println("<tr><td><pre>"+Util.GetFullKind((ge.destination.startsWith("URL:")) ? 'U' : ge.kind)+"</pre></td><td><pre><a href=\""+((ge.host == Main.props.getPropertyString("name","127.0.0.1")) ? "http" : "gopher")+"://"+ge.host+":"+ge.port+"/"+ge.kind+ge.destination+"\">"+ge.title+"</a></pre></td></tr>");
							}
						}
						out.println("</tbody></table>");
						out.println("<hr><i>Generated by jgopherd v"+Main.version+" on "+Main.props.getPropertyString("name","127.0.0.1")+"</i>");
						out.println("</body></html>");
					} else {
						BufferedReader br;
						try {
							br = new BufferedReader(new FileReader(httpreq));
						} catch (Throwable e1) {
							break;
						}
						while (true) {
							try {
								out.print(br.readLine());
							} catch (Throwable e) {
								break;
							}
						}
					}
					break;
				} else if (http) {
					continue;
				} else if (f.getName().endsWith(".class") && f.exists() && !nomole) {
					scode = 500;
					URL url;
					try {
						url = new URL("file://"+f.getParent());
					} catch (Throwable e) {
						MakeError("Error while loading j-mole: Invalid file",e);
						break;
					}
					URL[] urla = {url};
					URLClassLoader ucl = new URLClassLoader(urla);
					Class<JMole> cls;
					try {
						cls = (Class<JMole>)ucl.loadClass(f.getName().substring(0,f.getName().length()-6));
					} catch (Throwable e) {
						MakeError("Error while loading j-mole: Invalid class",e);
						break;
					}
					HashMap<String,String> envmap = new HashMap<String,String>();
					envmap.put("REMOTE_HOST",addr.getHostString());
					envmap.put("REMOTE_ADDR",addr.getHostName());
					envmap.put("REMOTE_PORT",""+addr.getPort());
					envmap.put("SERVER_HOST",Main.props.getPropertyString("name","127.0.0.1"));
					envmap.put("SERVER_PORT",""+Main.props.getPropertyInt("port",70));
					envmap.put("SELECTOR",fline);
					envmap.put("REQUEST",line);
					ArrayList<GopherEntry> entries;
					try {
						entries = cls.newInstance().run(envmap);
					} catch (Throwable e) {
						MakeError("Error while executing j-mole",e);
						break;
					}
					scode = 200;
					for (GopherEntry ge : entries) {
						out.println(ge.GetAsRaw());
					}
				} else {
					scode = 200;
					for (GopherEntry ge : MakeEntries(line,nomole)) {
						if (ge.kind == '3') scode = 404;
						out.println(ge.GetAsRaw());
					}
				}
			}
		if (log) Main.log.finest(source+" "+scode+" "+line);
		if (!http) out.println(".");
		try {
			socket.close();
		} catch (IOException e) {
			// do nothing
		}
	}
	
	private ArrayList<GopherEntry> MakeError(String error, String[] details) {
		ArrayList<GopherEntry> al = new ArrayList<GopherEntry>();
		try {
			al.add(new GopherEntry('3',error));
			al.add(new GopherEntry('i'));
			for (String det : details) {
				al.add(new GopherEntry('i',det));
			}
		} catch (Throwable e) {
			// do nothing
		}
		al.add(new GopherEntry('i'));
		al.add(new GopherEntry('i',"Generated by jgopherd v"+Main.version+" on "+Main.props.getPropertyString("name","127.0.0.1")));
		return al;
	}
	
	private ArrayList<GopherEntry> MakeError(String error, Throwable e) {
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		String[] sst = {"=== BEGIN STACK TRACE ==="};
		String[] est = {"=== END STACK TRACE ==="};
		return MakeError(error,Util.ConcatArrays(sst,sw.toString().split("\n"),est));
	}
	
	private ArrayList<GopherEntry> MakeEntries(String line, boolean nomole) {
		ArrayList<GopherEntry> al = new ArrayList<GopherEntry>();
		File f = new File(Main.props.getPropertyString("root","gopherdocs")+line);
		if (f.isDirectory()) {
			FileInputStream fis;
			try {
				fis = new FileInputStream(Main.props.getPropertyString("root","gopherdocs")+line+"/gophermap");
			} catch (Throwable e) {
				al.add(new GopherEntry('i',"Directory listing for "+line));
				al.add(new GopherEntry('i'));
				File f1;
				for (String fn : new File(Main.props.getPropertyString("root","gopherdocs")+line).list()) {
					if (!fn.equalsIgnoreCase("gophermap")&&!fn.equalsIgnoreCase("gophertag")) {
						f1 = new File(fn);
						al.add(new GopherEntry(Util.GetType(Main.props.getPropertyString("root","gopherdocs")+line+"/"+f1.getName()),f1.getName(),(line.endsWith("/") ? line.substring(0,line.length()-1) : line)+"/"+f1.getName()));
					}
				}
				al.add(new GopherEntry('i'));
				al.add(new GopherEntry('i',"Generated by jgopherd v"+Main.version+" on "+Main.props.getPropertyString("name","127.0.0.1")));
				return al;
			}
			return new BuckGophermap().parse(line,fis);
		} else if (Util.IsExecutable(f) && !nomole) {
			scode = 200;
			ArrayList<String> envvars = new ArrayList<String>();
			envvars.add("REMOTE_HOST="+addr.getHostName());
			envvars.add("REMOTE_ADDR="+addr.getHostString());
			envvars.add("REMOTE_PORT="+addr.getPort());
			envvars.add("SERVER_HOST="+Main.props.getPropertyString("name","127.0.0.1"));
			envvars.add("SERVER_PORT="+Main.props.getPropertyInt("port",70));
			envvars.add("SELECTOR="+fline);
			envvars.add("REQUEST="+line);
			Process prc = null;
			try {
				String[] sa = {f.getAbsolutePath()};
				prc = Runtime.getRuntime().exec(Util.ConcatArrays(sa,params.split(" ")),(String[])envvars.toArray(new String[envvars.size()]),f.getParentFile());
			} catch (Throwable e) {
				scode = 500;
				return MakeError("Error while trying to execute mole",e);
			}
			BufferedReader pos = new BufferedReader(new InputStreamReader(prc.getInputStream()));
			String ln;
			while (true) {
				try {
					ln = pos.readLine();
				} catch (Throwable e) {
					continue;
				}
				out.println(ln);
				try {
					prc.exitValue();
					break;
				} catch (Throwable e) {
					continue;
				}
			}
		} else {
			scode = 404;
			if (line.equalsIgnoreCase("/")) {
				al.add(new GopherEntry('3',"Welcome to jgopherd!"));
				al.add(new GopherEntry('i'));
				al.add(new GopherEntry('i',"This is a new installation of jgopherd on "+Main.props.getPropertyString("name","127.0.0.1")+"."));
				al.add(new GopherEntry('i',"There is currently no content to be served from this installation."));
				al.add(new GopherEntry('i'));
				al.add(new GopherEntry('i',"Administrator: To start using the server, place a gophermap file"));
				al.add(new GopherEntry('i',"on the gopherdocs directory (or the directory you have configured)"));
				al.add(new GopherEntry('i',"formatted as a Bucktooth gophermap file. After the file is found,"));
				al.add(new GopherEntry('i',"this message will disappear and the gophermap will be used."));
				al.add(new GopherEntry('i'));
				al.add(new GopherEntry('i',"Generated by jgopherd v"+Main.version+" on "+Main.props.getPropertyString("name","127.0.0.1")));
			} else {
				String[] sa = {"The specified resource was not found on this server."};
				return MakeError("Resource not found",sa);
			}
		}
		return al;
	}
}